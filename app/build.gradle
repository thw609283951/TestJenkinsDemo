apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'

//这里是groovy的代码了，定义了一个获取时间的方法，groovy是兼容java，它可以直接使用jdk里的方法
def getTime() {
    return new Date().format("yyyy-MM-dd-HHmmss", TimeZone.getTimeZone("GMT+08"))
}

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    useLibrary 'org.apache.http.legacy'

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    defaultConfig {
        applicationId rootProject.ext.android["appId"]
        versionName rootProject.ext.android["versionName"]
        versionCode rootProject.ext.android["versionCode"]
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]

        flavorDimensions rootProject.ext.android["versionCode"].toString()
        // AndroidManifest.xml 里面UMENG_CHANNEL的value为 ${UMENG_CHANNEL_VALUE}
        // manifestPlaceholders = [UMENG_CHANNEL_VALUE: "dev"]//添加一个默认渠道号

        resValue "string", "APP_NAME", rootProject.ext.android["appName"]
        manifestPlaceholders = [app_icon   : "@mipmap/ic_launcher"]
        buildConfigField("String", "APP_HOST_ADDRESS", "\""+APP_HOST_ADDRESS+"\"")

        ndk {
            abiFilters "armeabi"
        }
    }

    //签名配置
    signingConfigs{
        releaseSigning{
            //V1：应该是通过ZIP条目进行验证，这样APK 签署后可进行许多修改，这样可以移动甚至重新压缩文件。
            //V2：验证压缩文件的所有字节，而不是单个 ZIP 条目，因此，在签名后无法再更改(包括 zipalign)。正因如此，现在在编译过程中，我们将压缩、调整和签署合并成一步完成。好处显而易见，更安全而且新的签名可缩短在设备上进行验证的时间（不需要费时地解压缩然后验证），从而加快应用安装速度。
            v1SigningEnabled true
            v2SigningEnabled true

            try{
                storeFile file(KEYSTORES_PATH)
                storePassword '123456'
                keyAlias 'key'
                keyPassword '123456'
            }catch (ex){
                throw new InvalidUserDataException(ex.toString())
            }

            android.applicationVariants.all { variant ->
                // 自定义输出路径
                variant.getPackageApplication().outputDirectory = new File(BUILD_PATH)
                variant.outputs.all { output ->
                    //时间戳
                    def timeNow
                    //是否为Jenkins打包，输出路径不同
                    if (IS_JENKINS.toBoolean()) {
                        //Jenkins打包输出到服务器路径
                        timeNow = getTime()
                    } else {
                        //本机打包输出在本机路径
                        timeNow = getTime()
                    }
                    outputFileName = APP_NAME +'-'+ variant.buildType.name + '-v'+defaultConfig.versionName +'-'+ variant.productFlavors[0].name + '-' + timeNow + '.apk'
                }
            }
        }
    }
    /**
     * 替换AndroidManifest.xml的BaiduMobAd_CHANNEL_VALUE字符串为渠道名称格式
     * <meta-data
     *    android:name="BaiduMobAd_CHANNEL"
     *    android:value="${BaiduMobAd_CHANNEL_VALUE}" />
     */
    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }

    buildTypes {
        debug{
            //给applicationId添加后缀“.debug”
            applicationIdSuffix ".debug"
            buildConfigField "boolean", "LOG_DEBUG", "true"
            zipAlignEnabled false
            shrinkResources false
            minifyEnabled false
            debuggable true
            //签名
            signingConfig signingConfigs.releaseSigning
        }

        release {
            // 不显示Log
            buildConfigField "boolean", "LEO_DEBUG", "false"
            //是否zip对齐
            zipAlignEnabled true
            // 缩减resource文件
            shrinkResources true
            //Proguard
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名
            signingConfig signingConfigs.releaseSigning
        }

        //这里的作用跟 singingConfigs 差不多，只是为不同的 flavor 设置一些属性
        //常见的设置比如设置不同的渠道编号，设置不同的 api 服务器等等
        productFlavors {
            dev {
//                manifestPlaceholders = [UMENG_CHANNEL_VALUE: "fir"]
            }
//            GooglePlay {
//                manifestPlaceholders = [UMENG_CHANNEL_VALUE: "GooglePlay"]
//            }
//            Umeng {
//                manifestPlaceholders = [UMENG_CHANNEL_VALUE: "Umeng"]
//            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation(rootProject.ext.dependencies["appcompat-v7"]){
        exclude module: 'support-annotations'
    }
    implementation rootProject.ext.dependencies["design"]
    implementation rootProject.ext.dependencies["constraint-layout"]
    annotationProcessor rootProject.ext.dependencies["espresso-core"]

    implementation rootProject.ext.dependencies["butterknife"]
    annotationProcessor(rootProject.ext.dependencies["butterknife-compiler"]) {
        exclude module: 'support-annotations'
    }
    implementation rootProject.ext.dependencies["utilcode"]
}
